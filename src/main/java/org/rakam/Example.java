/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.rakam;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Example extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Example\",\"namespace\":\"org.rakam\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"email0\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"email1\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"email2\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"email3\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence email0;
  @Deprecated public java.lang.CharSequence email1;
  @Deprecated public java.lang.CharSequence email2;
  @Deprecated public java.lang.CharSequence email3;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Example() {}

  /**
   * All-args constructor.
   */
  public Example(java.lang.Integer id, java.lang.CharSequence name, java.lang.CharSequence email0, java.lang.CharSequence email1, java.lang.CharSequence email2, java.lang.CharSequence email3) {
    this.id = id;
    this.name = name;
    this.email0 = email0;
    this.email1 = email1;
    this.email2 = email2;
    this.email3 = email3;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return email0;
    case 3: return email1;
    case 4: return email2;
    case 5: return email3;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: email0 = (java.lang.CharSequence)value$; break;
    case 3: email1 = (java.lang.CharSequence)value$; break;
    case 4: email2 = (java.lang.CharSequence)value$; break;
    case 5: email3 = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'email0' field.
   */
  public java.lang.CharSequence getEmail0() {
    return email0;
  }

  /**
   * Sets the value of the 'email0' field.
   * @param value the value to set.
   */
  public void setEmail0(java.lang.CharSequence value) {
    this.email0 = value;
  }

  /**
   * Gets the value of the 'email1' field.
   */
  public java.lang.CharSequence getEmail1() {
    return email1;
  }

  /**
   * Sets the value of the 'email1' field.
   * @param value the value to set.
   */
  public void setEmail1(java.lang.CharSequence value) {
    this.email1 = value;
  }

  /**
   * Gets the value of the 'email2' field.
   */
  public java.lang.CharSequence getEmail2() {
    return email2;
  }

  /**
   * Sets the value of the 'email2' field.
   * @param value the value to set.
   */
  public void setEmail2(java.lang.CharSequence value) {
    this.email2 = value;
  }

  /**
   * Gets the value of the 'email3' field.
   */
  public java.lang.CharSequence getEmail3() {
    return email3;
  }

  /**
   * Sets the value of the 'email3' field.
   * @param value the value to set.
   */
  public void setEmail3(java.lang.CharSequence value) {
    this.email3 = value;
  }

  /** Creates a new Example RecordBuilder */
  public static org.rakam.Example.Builder newBuilder() {
    return new org.rakam.Example.Builder();
  }
  
  /** Creates a new Example RecordBuilder by copying an existing Builder */
  public static org.rakam.Example.Builder newBuilder(org.rakam.Example.Builder other) {
    return new org.rakam.Example.Builder(other);
  }
  
  /** Creates a new Example RecordBuilder by copying an existing Example instance */
  public static org.rakam.Example.Builder newBuilder(org.rakam.Example other) {
    return new org.rakam.Example.Builder(other);
  }
  
  /**
   * RecordBuilder for Example instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Example>
    implements org.apache.avro.data.RecordBuilder<Example> {

    private int id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence email0;
    private java.lang.CharSequence email1;
    private java.lang.CharSequence email2;
    private java.lang.CharSequence email3;

    /** Creates a new Builder */
    private Builder() {
      super(org.rakam.Example.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.rakam.Example.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email0)) {
        this.email0 = data().deepCopy(fields()[2].schema(), other.email0);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email1)) {
        this.email1 = data().deepCopy(fields()[3].schema(), other.email1);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.email2)) {
        this.email2 = data().deepCopy(fields()[4].schema(), other.email2);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.email3)) {
        this.email3 = data().deepCopy(fields()[5].schema(), other.email3);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Example instance */
    private Builder(org.rakam.Example other) {
            super(org.rakam.Example.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email0)) {
        this.email0 = data().deepCopy(fields()[2].schema(), other.email0);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email1)) {
        this.email1 = data().deepCopy(fields()[3].schema(), other.email1);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.email2)) {
        this.email2 = data().deepCopy(fields()[4].schema(), other.email2);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.email3)) {
        this.email3 = data().deepCopy(fields()[5].schema(), other.email3);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.rakam.Example.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.rakam.Example.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public org.rakam.Example.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public org.rakam.Example.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'email0' field */
    public java.lang.CharSequence getEmail0() {
      return email0;
    }
    
    /** Sets the value of the 'email0' field */
    public org.rakam.Example.Builder setEmail0(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.email0 = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'email0' field has been set */
    public boolean hasEmail0() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'email0' field */
    public org.rakam.Example.Builder clearEmail0() {
      email0 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'email1' field */
    public java.lang.CharSequence getEmail1() {
      return email1;
    }
    
    /** Sets the value of the 'email1' field */
    public org.rakam.Example.Builder setEmail1(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.email1 = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'email1' field has been set */
    public boolean hasEmail1() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'email1' field */
    public org.rakam.Example.Builder clearEmail1() {
      email1 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'email2' field */
    public java.lang.CharSequence getEmail2() {
      return email2;
    }
    
    /** Sets the value of the 'email2' field */
    public org.rakam.Example.Builder setEmail2(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.email2 = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'email2' field has been set */
    public boolean hasEmail2() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'email2' field */
    public org.rakam.Example.Builder clearEmail2() {
      email2 = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'email3' field */
    public java.lang.CharSequence getEmail3() {
      return email3;
    }
    
    /** Sets the value of the 'email3' field */
    public org.rakam.Example.Builder setEmail3(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.email3 = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'email3' field has been set */
    public boolean hasEmail3() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'email3' field */
    public org.rakam.Example.Builder clearEmail3() {
      email3 = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Example build() {
      try {
        Example record = new Example();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.email0 = fieldSetFlags()[2] ? this.email0 : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.email1 = fieldSetFlags()[3] ? this.email1 : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.email2 = fieldSetFlags()[4] ? this.email2 : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.email3 = fieldSetFlags()[5] ? this.email3 : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
